<양방향 연관관계와 연관관계의 주인>

why 어려우면서 중요한 개념이냐
객체 <-> 테이블 의 패러다임 차이

[참조] vs [외래키를 활용한 JOIN]

둘간의 차이가 무엇인지, 차이에서 오는 개념을 이해해야한다.
"차이"자체를 이해해야한다.

N:1 구조에서
Member는 Team을 갖고있지만 Team은 Member를 갖고있지 않다.
Team객체에서 Member를 찾고싶다면 ?

N:1구조에서라도 DB에서는 서로 JOIN을 활용한 조회가 가능하다.

테이블에서는 단방향을 나타낸 그림에서도 서로를 찾아 갈 수 있다.

[테이블에서의 패러다임]
* 테이블의 연관관계는 외래키 하나로 양방향이 저절로 성립된다.
-> 사실상 테이블의 연관관계는 방향이란 개념ㅈㅏ체가 없다 -> FK하나로 양방향이 성립이된다.

[객체에서의 패러다임]
* Member에선 Team으로 갈 수 있는데 Team에서는 Member로 갈 수가없다.
-> Team에 Members라는 List를 선언해줘야 갈 수가있다.
-> 양방향에 참조값을 넣어줘야한다.

Team객체 참조값 설정
@OneToMany (mappedBy = "team") -> mappedBy란 ? 나의 반대편 site에는 team이라는게 걸려있어 (Member.team)이라고 링크를 걸어둔다.
private List<Member> members = new ArrayList<>();//관례사항 : ADD할때 NullPointerException이 발생하지 않도록!

* mappedBy는 왜 있어야하나 ?
-> JPA에서 왜 설계가 되었나 ? -> 객체와 테이블간에 연관관계를 맺는 차이를 이해해야 한다.

[객체에서의 연관관계 패러다임] -> 단방향인 연관관계가 두개가 있는것이다 이것을 -> 억지로 표현하자면 양방향이라고 표현한다.
 회원 -> 팀 연관관계 1개(단방향)
 팀 -> 회원 연관관계 1개(단방향)

[테이블에서의 연관관계 패러다임] -> 외래키값만으로 양방향 연관관계가 설립된다.
 회원 <-> 팀 연관관계 1개(양방향) -> 사실상 방향개념이 없다.

* 객체에서의 연관관계에서는 둘 중 어느객체에 외래키 관리권한을 줘야하나.?
 Member객체 안에 team 을 매핑해야하나 ?
 Team객체 안에 members로 매핑을 해야하나 ?

 -> 룰이 생긴다 -> 둘 중 하나로 외래키를 관리 하자 (주인을 정하자)
 ->->->연관관계의 주인 (사실상 양방향 관계에서 나타난 개념)
 -> 객체의 두 관계중 하나를 연관관계의 주인으로 지정 -> 연관관계의 주인만이 외래키를 관리(등록,수정)
 -> 주인이 아닌쪽은 읽기만 가능
 -> 주인은 mappedBy 속성 사용X
 -> 주인이 아니면 mappedBy 속성으로 주인을 '지정'

 누구를 주인으로 ?
 -> 걍 답이 있다 -> ManyToOne인녀석 -> mappedBy적힌곳은 읽기만 가능하고 , 값을 넣어봐야 아무일도 일어나지 않는다.
 -> 조회는 가능하다.

 -> 외래키가 있는 곳을 주인으로 정하자
 Team 에서의 members는 가짜매핑이라고 해두자.

 -> 디비관점에서 외래키를 갖고있는쪽이 N이다. 그 쪽은 ManyToOne으로 지정
 -> Business적으로 중요한것이아니다.